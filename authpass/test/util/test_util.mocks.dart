// Mocks generated by Mockito 5.4.6 from annotations
// in authpass/test/util/test_util.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:authpass/bloc/analytics.dart' as _i4;
import 'package:authpass/bloc/app_data.dart' as _i3;
import 'package:authpass/bloc/kdbx/file_content.dart' as _i10;
import 'package:authpass/bloc/kdbx/file_source.dart' as _i9;
import 'package:authpass/bloc/kdbx_bloc.dart' as _i6;
import 'package:authpass/cloud_storage/authpasscloud/authpass_cloud_provider.dart'
    as _i15;
import 'package:authpass/cloud_storage/cloud_storage_bloc.dart' as _i5;
import 'package:authpass/cloud_storage/cloud_storage_provider.dart' as _i14;
import 'package:authpass/env/_base.dart' as _i2;
import 'package:authpass/l10n-generated/app_localizations.dart' as _i12;
import 'package:flutter_async_utils/flutter_async_utils.dart' as _i13;
import 'package:kdbx/kdbx.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/rxdart.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEnv_0 extends _i1.SmartFake implements _i2.Env {
  _FakeEnv_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAppDataBloc_1 extends _i1.SmartFake implements _i3.AppDataBloc {
  _FakeAppDataBloc_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAnalytics_2 extends _i1.SmartFake implements _i4.Analytics {
  _FakeAnalytics_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCloudStorageBloc_3 extends _i1.SmartFake
    implements _i5.CloudStorageBloc {
  _FakeCloudStorageBloc_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuickUnlockStorage_4 extends _i1.SmartFake
    implements _i6.QuickUnlockStorage {
  _FakeQuickUnlockStorage_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKdbxFormat_5 extends _i1.SmartFake implements _i7.KdbxFormat {
  _FakeKdbxFormat_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOpenedKdbxFiles_6 extends _i1.SmartFake
    implements _i6.OpenedKdbxFiles {
  _FakeOpenedKdbxFiles_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeValueStream_7<T> extends _i1.SmartFake
    implements _i8.ValueStream<T> {
  _FakeValueStream_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKdbxOpenedFile_8 extends _i1.SmartFake
    implements _i6.KdbxOpenedFile {
  _FakeKdbxOpenedFile_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileSource_9 extends _i1.SmartFake implements _i9.FileSource {
  _FakeFileSource_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKdbxEntry_10 extends _i1.SmartFake implements _i7.KdbxEntry {
  _FakeKdbxEntry_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileContent_11 extends _i1.SmartFake implements _i10.FileContent {
  _FakeFileContent_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAttachmentProvider_12 extends _i1.SmartFake
    implements _i6.AttachmentProvider {
  _FakeAttachmentProvider_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [KdbxBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockKdbxBloc extends _i1.Mock implements _i6.KdbxBloc {
  MockKdbxBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Env get env =>
      (super.noSuchMethod(
            Invocation.getter(#env),
            returnValue: _FakeEnv_0(this, Invocation.getter(#env)),
          )
          as _i2.Env);

  @override
  _i3.AppDataBloc get appDataBloc =>
      (super.noSuchMethod(
            Invocation.getter(#appDataBloc),
            returnValue: _FakeAppDataBloc_1(
              this,
              Invocation.getter(#appDataBloc),
            ),
          )
          as _i3.AppDataBloc);

  @override
  _i4.Analytics get analytics =>
      (super.noSuchMethod(
            Invocation.getter(#analytics),
            returnValue: _FakeAnalytics_2(this, Invocation.getter(#analytics)),
          )
          as _i4.Analytics);

  @override
  _i5.CloudStorageBloc get cloudStorageBloc =>
      (super.noSuchMethod(
            Invocation.getter(#cloudStorageBloc),
            returnValue: _FakeCloudStorageBloc_3(
              this,
              Invocation.getter(#cloudStorageBloc),
            ),
          )
          as _i5.CloudStorageBloc);

  @override
  _i6.QuickUnlockStorage get quickUnlockStorage =>
      (super.noSuchMethod(
            Invocation.getter(#quickUnlockStorage),
            returnValue: _FakeQuickUnlockStorage_4(
              this,
              Invocation.getter(#quickUnlockStorage),
            ),
          )
          as _i6.QuickUnlockStorage);

  @override
  _i7.KdbxFormat get kdbxFormat =>
      (super.noSuchMethod(
            Invocation.getter(#kdbxFormat),
            returnValue: _FakeKdbxFormat_5(
              this,
              Invocation.getter(#kdbxFormat),
            ),
          )
          as _i7.KdbxFormat);

  @override
  Iterable<MapEntry<_i9.FileSource, _i7.KdbxFile>> get openedFilesWithSources =>
      (super.noSuchMethod(
            Invocation.getter(#openedFilesWithSources),
            returnValue: <MapEntry<_i9.FileSource, _i7.KdbxFile>>[],
          )
          as Iterable<MapEntry<_i9.FileSource, _i7.KdbxFile>>);

  @override
  _i6.OpenedKdbxFiles get openedFiles =>
      (super.noSuchMethod(
            Invocation.getter(#openedFiles),
            returnValue: _FakeOpenedKdbxFiles_6(
              this,
              Invocation.getter(#openedFiles),
            ),
          )
          as _i6.OpenedKdbxFiles);

  @override
  List<_i7.KdbxFile> get openedFilesKdbx =>
      (super.noSuchMethod(
            Invocation.getter(#openedFilesKdbx),
            returnValue: <_i7.KdbxFile>[],
          )
          as List<_i7.KdbxFile>);

  @override
  _i8.ValueStream<_i6.OpenedKdbxFiles> get openedFilesChanged =>
      (super.noSuchMethod(
            Invocation.getter(#openedFilesChanged),
            returnValue: _FakeValueStream_7<_i6.OpenedKdbxFiles>(
              this,
              Invocation.getter(#openedFilesChanged),
            ),
          )
          as _i8.ValueStream<_i6.OpenedKdbxFiles>);

  @override
  set delegate(_i6.KdbxBlocDelegate? _delegate) => super.noSuchMethod(
    Invocation.setter(#delegate, _delegate),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Future<_i6.KdbxOpenedFile> updateOpenedFile(
    _i6.KdbxOpenedFile? file,
    _i6.OpenedFileUpdater? updater,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateOpenedFile, [file, updater]),
            returnValue: _i11.Future<_i6.KdbxOpenedFile>.value(
              _FakeKdbxOpenedFile_8(
                this,
                Invocation.method(#updateOpenedFile, [file, updater]),
              ),
            ),
          )
          as _i11.Future<_i6.KdbxOpenedFile>);

  @override
  _i11.Stream<_i6.OpenFileResult> openFile(
    _i9.FileSource? file,
    _i7.Credentials? credentials, {
    bool? addToQuickUnlock = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #openFile,
              [file, credentials],
              {#addToQuickUnlock: addToQuickUnlock},
            ),
            returnValue: _i11.Stream<_i6.OpenFileResult>.empty(),
          )
          as _i11.Stream<_i6.OpenFileResult>);

  @override
  _i11.Future<void> continueLoadInBackground(
    _i11.StreamIterator<_i6.OpenFileResult>? openIt, {
    required String? debugName,
    required _i9.FileSource? fileSource,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #continueLoadInBackground,
              [openIt],
              {#debugName: debugName, #fileSource: fileSource},
            ),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  bool hasQuickUnlockOpen() =>
      (super.noSuchMethod(
            Invocation.method(#hasQuickUnlockOpen, []),
            returnValue: false,
          )
          as bool);

  @override
  _i11.Future<int> reopenQuickUnlock(
    _i12.AppLocalizations? loc, [
    _i13.TaskProgress? progress,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#reopenQuickUnlock, [loc, progress]),
            returnValue: _i11.Future<int>.value(0),
          )
          as _i11.Future<int>);

  @override
  _i11.Future<void> close(_i7.KdbxFile? file) =>
      (super.noSuchMethod(
            Invocation.method(#close, [file]),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  _i11.Future<void> closeAllFiles({required bool? clearQuickUnlock}) =>
      (super.noSuchMethod(
            Invocation.method(#closeAllFiles, [], {
              #clearQuickUnlock: clearQuickUnlock,
            }),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  _i11.Future<_i9.FileSource> createFile({
    required String? password,
    required String? databaseName,
    bool? openAfterCreate = false,
    _i14.CloudStorageSaveTarget? target,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createFile, [], {
              #password: password,
              #databaseName: databaseName,
              #openAfterCreate: openAfterCreate,
              #target: target,
            }),
            returnValue: _i11.Future<_i9.FileSource>.value(
              _FakeFileSource_9(
                this,
                Invocation.method(#createFile, [], {
                  #password: password,
                  #databaseName: databaseName,
                  #openAfterCreate: openAfterCreate,
                  #target: target,
                }),
              ),
            ),
          )
          as _i11.Future<_i9.FileSource>);

  @override
  _i7.KdbxEntry createEntry({_i7.KdbxFile? file, _i7.KdbxGroup? group}) =>
      (super.noSuchMethod(
            Invocation.method(#createEntry, [], {#file: file, #group: group}),
            returnValue: _FakeKdbxEntry_10(
              this,
              Invocation.method(#createEntry, [], {#file: file, #group: group}),
            ),
          )
          as _i7.KdbxEntry);

  @override
  _i11.Future<_i10.FileContent> saveFile(
    _i7.KdbxFile? file, {
    _i9.FileSource? toFileSource,
    _i7.Credentials? updateCredentials,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #saveFile,
              [file],
              {
                #toFileSource: toFileSource,
                #updateCredentials: updateCredentials,
              },
            ),
            returnValue: _i11.Future<_i10.FileContent>.value(
              _FakeFileContent_11(
                this,
                Invocation.method(
                  #saveFile,
                  [file],
                  {
                    #toFileSource: toFileSource,
                    #updateCredentials: updateCredentials,
                  },
                ),
              ),
            ),
          )
          as _i11.Future<_i10.FileContent>);

  @override
  _i6.KdbxOpenedFile fileForKdbxFile(_i7.KdbxFile? file) =>
      (super.noSuchMethod(
            Invocation.method(#fileForKdbxFile, [file]),
            returnValue: _FakeKdbxOpenedFile_8(
              this,
              Invocation.method(#fileForKdbxFile, [file]),
            ),
          )
          as _i6.KdbxOpenedFile);

  @override
  _i6.KdbxOpenedFile? fileForFileSource(_i9.FileSource? fileSource) =>
      (super.noSuchMethod(Invocation.method(#fileForFileSource, [fileSource]))
          as _i6.KdbxOpenedFile?);

  @override
  _i11.Future<_i6.KdbxOpenedFile> saveAs(
    _i6.KdbxOpenedFile? oldFile,
    _i9.FileSource? output,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveAs, [oldFile, output]),
            returnValue: _i11.Future<_i6.KdbxOpenedFile>.value(
              _FakeKdbxOpenedFile_8(
                this,
                Invocation.method(#saveAs, [oldFile, output]),
              ),
            ),
          )
          as _i11.Future<_i6.KdbxOpenedFile>);

  @override
  _i11.Future<_i6.KdbxOpenedFile> saveAsNewFile(
    _i6.KdbxOpenedFile? oldFile,
    _i14.CloudStorageSelectorSaveResult? createFileInfo,
    _i14.CloudStorageProvider? cs,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveAsNewFile, [oldFile, createFileInfo, cs]),
            returnValue: _i11.Future<_i6.KdbxOpenedFile>.value(
              _FakeKdbxOpenedFile_8(
                this,
                Invocation.method(#saveAsNewFile, [
                  oldFile,
                  createFileInfo,
                  cs,
                ]),
              ),
            ),
          )
          as _i11.Future<_i6.KdbxOpenedFile>);

  @override
  _i11.Future<_i9.FileSource> saveLocally(_i9.FileSource? source) =>
      (super.noSuchMethod(
            Invocation.method(#saveLocally, [source]),
            returnValue: _i11.Future<_i9.FileSource>.value(
              _FakeFileSource_9(
                this,
                Invocation.method(#saveLocally, [source]),
              ),
            ),
          )
          as _i11.Future<_i9.FileSource>);

  @override
  _i7.KdbxEntry? findEntryByUuid(String? uuid) =>
      (super.noSuchMethod(Invocation.method(#findEntryByUuid, [uuid]))
          as _i7.KdbxEntry?);

  @override
  void clearEntryByUuidLookup() => super.noSuchMethod(
    Invocation.method(#clearEntryByUuidLookup, []),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Stream<_i6.ReloadStatus> reload(_i6.KdbxOpenedFile? file) =>
      (super.noSuchMethod(
            Invocation.method(#reload, [file]),
            returnValue: _i11.Stream<_i6.ReloadStatus>.empty(),
          )
          as _i11.Stream<_i6.ReloadStatus>);

  @override
  _i11.Future<_i6.AttachmentProvider> attachmentProviderForFileSource(
    _i7.KdbxFile? file,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#attachmentProviderForFileSource, [file]),
            returnValue: _i11.Future<_i6.AttachmentProvider>.value(
              _FakeAttachmentProvider_12(
                this,
                Invocation.method(#attachmentProviderForFileSource, [file]),
              ),
            ),
          )
          as _i11.Future<_i6.AttachmentProvider>);

  @override
  _i15.AuthPassExternalAttachment? attachmentInfo(_i7.KdbxBinary? binary) =>
      (super.noSuchMethod(Invocation.method(#attachmentInfo, [binary]))
          as _i15.AuthPassExternalAttachment?);

  @override
  bool attachmentIsFromCloud(_i7.KdbxBinary? binary) =>
      (super.noSuchMethod(
            Invocation.method(#attachmentIsFromCloud, [binary]),
            returnValue: false,
          )
          as bool);
}
